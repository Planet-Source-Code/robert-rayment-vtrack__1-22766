     1                                  ;VTrack2.asm  by Robert Rayment  1/5/01
     2                                  
     3                                  ;VB
     4                                  
     5                                  ;   res& = CallWindowProc(ptMCode&, ptBITDATA&, irand&, 2&, OpCode&)
     6                                  ;                                   8           12      16  20        
     7                                  
     8                                  ;' OpCode& = 0 MC FloorCASTER
     9                                  ;' OpCode& = 1 MC Big Plasmas
    10                                  ;' OpCode& = 2 MC Plus Smoothing
    11                                  
    12                                  ;'=========================================================
    13                                  ;' Structure for input to mcode for RayCASTER & Plasma
    14                                  ;' PS = ProjSurf(), FS = FloorSurf()
    15                                  ; Public Type BITDATA
    16                                  ;    
    17                                  ;   PSWH As Long            ' Width=Height of PS         0 PSWH
    18                                  ;   ptrProjSurf As Long     ' Pointer to PS              4 ptPS
    19                                  ;   FSWH As Long            ' Width=Height of FS         8 FSWH
    20                                  ;   ptrFloorSurf As Long    ' Pointer to FS             12 ptFS
    21                                  ;   
    22                                  ;   LAH As Long             ' Look ahead length L       16 LAH        'Input
    23                                  ;   ex As Long              ' eye x-coord               20 ex         'Input
    24                                  ;   ey As Long              ' eye y-coord               24 ey         'Input
    25                                  ;   TANG As Long            ' Track angle 0-359         28 TANG       'Input
    26                                  ;   Collision As Long       ' 0/1 no/yes collision      32 Collision  'Return
    27                                  ;   
    28                                  ;   zvp As Single           ' eye z-coord               36 zvp        'Input
    29                                  ;   zdslope As Single       ' Ray slope                 40 zdslope    'Input
    30                                  ;   zslopemult As Single    ' Ray slope multiplier      44 zslopemult 'Input
    31                                  ;   zhtmult As Single       ' Objects height multiplier 48 zhtmult    'Input
    32                                  ;	hlim As Long			' Height limiter            52 hlim       'Input
    33                                  ;
    34                                  ; End Type
    35                                  ; Public bmp As BITDATA
    36                                  ;'=========================================================
    37                                  
    38                                  %macro movab 2		;name & num of parameters
    39                                    push dword %2		;2nd param
    40                                    pop dword %1		;1st param
    41                                  %endmacro			;use  movab %1,%2
    42                                  ;Allows eg	movab bmW,[ebx+4]
    43                                  
    44                                  ; INPUT DATA STORE
    45                                  ; Long integers
    46                                  %define PSWH        [ebp-4]
    47                                  %define ptPS        [ebp-8]
    48                                  %define FSWH        [ebp-12]
    49                                  %define ptFS        [ebp-16]
    50                                  %define LAH         [ebp-20]
    51                                  %define ex          [ebp-24]
    52                                  %define ey          [ebp-28]
    53                                  %define TANG        [ebp-32]
    54                                  %define Collision   [ebp-36]
    55                                  
    56                                  ; Singles
    57                                  %define zvp         [ebp-40]
    58                                  %define zdslope     [ebp-44]
    59                                  %define zslopemult  [ebp-48]
    60                                  %define zhtmult     [ebp-52]
    61                                  %define hlim        [ebp-56]
    62                                  ; ----------------------------
    63                                  
    64                                  ;	TEMPORARY VARIABLES FOR FLOOR_CASTER
    65                                  %define i2      [ebp-60]       ; integer 2
    66                                  %define i360    [ebp-64]       ; integer 360
    67                                  %define PSWH2   [ebp-68]       ; = PSWH/2
    68                                  
    69                                  %define zrayang	[ebp-72]       ; =(TANG*2*pi)-PSWH/2
    70                                  %define xvp     [ebp-76]       ; single x	
    71                                  %define yvp     [ebp-80]       ; single y
    72                                  %define C       [ebp-84]       ; Column number
    73                                  
    74                                  %define xray    [ebp-88]       ; singles
    75                                  %define yray    [ebp-92]
    76                                  %define zray    [ebp-96]
    77                                  %define izray   [ebp-100]       ; integer
    78                                  
    79                                  %define zdx     [ebp-104]      ; singles 
    80                                  %define zdy     [ebp-108]
    81                                  %define zdz     [ebp-112]
    82                                  
    83                                  %define zvoxscale  [ebp-116]
    84                                  %define row        [ebp-120]   ; integers
    85                                  
    86                                  %define ixr     [ebp-124]      
    87                                  %define iyr     [ebp-128]
    88                                  
    89                                  %define cul     [ebp-132]      ; color		
    90                                  %define iht     [ebp-136]      ; height integer
    91                                  
    92                                  %define Collide [ebp-140]      ; Collision value
    93                                  
    94                                  %define irand   [ebp-144]      ; Random seed
    95                                  %define ir255   [ebp-148]      ; Random seed
    96                                  
    97                                  [bits 32]
    98                                  
    99 00000000 55                      	push ebp
   100 00000001 89E5                    	mov ebp,esp
   101 00000003 81EC94000000            	sub esp,148
   102 00000009 57                      	push edi
   103 0000000A 56                      	push esi
   104 0000000B 53                      	push ebx
   105                                  
   106                                  ;	LOAD INPUT DATA
   107                                  
   108 0000000C 8B5D08                  	mov ebx,[ebp+8]		; ->BITDATA
   109                                  	
   110                                  	movab PSWH,[ebx]
   111 0000000F FF33                <1>   push dword %2
   112 00000011 8F45FC              <1>   pop dword %1
   113                                  	movab ptPS,[ebx+4]
   114 00000014 FF7304              <1>   push dword %2
   115 00000017 8F45F8              <1>   pop dword %1
   116                                  	movab FSWH,[ebx+8]
   117 0000001A FF7308              <1>   push dword %2
   118 0000001D 8F45F4              <1>   pop dword %1
   119                                  	movab ptFS,[ebx+12]
   120 00000020 FF730C              <1>   push dword %2
   121 00000023 8F45F0              <1>   pop dword %1
   122                                  	movab LAH, [ebx+16]
   123 00000026 FF7310              <1>   push dword %2
   124 00000029 8F45EC              <1>   pop dword %1
   125                                  	
   126                                  	movab ex,       [ebx+20]
   127 0000002C FF7314              <1>   push dword %2
   128 0000002F 8F45E8              <1>   pop dword %1
   129                                  	movab ey,       [ebx+24]
   130 00000032 FF7318              <1>   push dword %2
   131 00000035 8F45E4              <1>   pop dword %1
   132                                  	movab TANG,     [ebx+28]
   133 00000038 FF731C              <1>   push dword %2
   134 0000003B 8F45E0              <1>   pop dword %1
   135                                  	movab Collision,[ebx+32]
   136 0000003E FF7320              <1>   push dword %2
   137 00000041 8F45DC              <1>   pop dword %1
   138                                  	
   139                                  	movab zvp,       [ebx+36]
   140 00000044 FF7324              <1>   push dword %2
   141 00000047 8F45D8              <1>   pop dword %1
   142                                  	movab zdslope,   [ebx+40]
   143 0000004A FF7328              <1>   push dword %2
   144 0000004D 8F45D4              <1>   pop dword %1
   145                                  	movab zslopemult,[ebx+44]
   146 00000050 FF732C              <1>   push dword %2
   147 00000053 8F45D0              <1>   pop dword %1
   148                                  	movab zhtmult,   [ebx+48]
   149 00000056 FF7330              <1>   push dword %2
   150 00000059 8F45CC              <1>   pop dword %1
   151                                  	movab hlim,      [ebx+52]
   152 0000005C FF7334              <1>   push dword %2
   153 0000005F 8F45C8              <1>   pop dword %1
   154                                  
   155                                  ; ----------------------------
   156                                  	; GET OpCode&
   157 00000062 8B4514                  	mov eax,[ebp+20]
   158                                  ; ----------------------------
   159                                  	
   160 00000065 3D00000000              	cmp eax,0
   161 0000006A 7510                    	jne TestFor1
   162                                  	
   163 0000006C 898574FFFFFF            	mov Collide,eax		; No Collision
   164                                  	
   165 00000072 E832000000              	CALL FLOOR_CASTER
   166                                  
   167 00000077 E91C000000              	jmp GETOUT
   168                                  	
   169                                  TestFor1:
   170 0000007C D1D8                    	rcr eax,1
   171 0000007E 730A                    	jnc TestFor2
   172                                  	
   173 00000080 E839020000              	CALL PLASMA
   174 00000085 E90E000000              	jmp GETOUT
   175                                  
   176                                  TestFor2:
   177 0000008A D1D8                    	rcr eax,1
   178 0000008C 730A                    	jnc TestFor4
   179                                  
   180 0000008E E8C5040000              	CALL BYTESMOOTHING
   181 00000093 E900000000              	jmp GETOUT
   182                                  
   183                                  TestFor4:
   184                                  
   185                                  GETOUT:
   186                                  	
   187 00000098 8B8570FFFFFF            	mov eax,irand
   188                                  	
   189 0000009E 89D9                    	mov ecx,ebx
   190 000000A0 5B                      	pop ebx
   191 000000A1 5E                      	pop esi
   192 000000A2 5F                      	pop edi
   193 000000A3 89EC                    	mov esp,ebp
   194 000000A5 5D                      	pop ebp
   195 000000A6 C21000                  	RET 16
   196                                  
   197                                  ;###########################################
   198                                  FLOOR_CASTER:
   199                                  	; Store some constants
   200 000000A9 B802000000              	mov eax,2
   201 000000AE 8945C4                  	mov i2,eax
   202 000000B1 B868010000              	mov eax,360
   203 000000B6 8945C0                  	mov i360,eax
   204 000000B9 8B45FC                  	mov eax,PSWH
   205 000000BC D1E8                    	shr eax,1
   206 000000BE 8945BC                  	mov PSWH2,eax		; PSWH/2
   207                                  	
   208                                  	; Calculate zrayang
   209 000000C1 DB45E0                  	fild dword TANG		; TANG
   210 000000C4 DB45C4                  	fild dword i2		; 2,TANG
   211 000000C7 DEC9                    	fmulp st1			; 2*TANG
   212 000000C9 D9EB                    	fldpi				; pi,2*TANG
   213 000000CB DEC9                    	fmulp st1			; pi*2*TANG
   214 000000CD DB45BC                  	fild dword PSWH2	; PSWH/2,pi*2*TANG
   215 000000D0 DEE9                    	fsubp ST1			; st1-st0
   216 000000D2 D95DB8                  	fstp dword zrayang  ; =(TANG*2*pi)-PSWH/2
   217                                  	
   218                                  	; Store ex & ey as singles ie xvp, yvp
   219 000000D5 DB45E8                  	fild dword ex		; xvp=ex
   220 000000D8 D95DB4                  	fstp dword xvp
   221 000000DB DB45E4                  	fild dword ey		; yvp=ey
   222 000000DE D95DB0                  	fstp dword yvp
   223                                  	
   224                                  	; OUTER COLUMN LOOP
   225 000000E1 B900000000              	mov ecx,0			; For C = 0 To PSWH - 1
   226                                  
   227                                  NEXT_COLUMN:
   228                                  
   229 000000E6 51                      	PUSH ecx
   230 000000E7 894DAC                  	mov dword C,ecx		; Store C
   231                                  
   232                                  	; Calc xray,yray,zray
   233 000000EA 8B45B4                  	mov eax,xvp			; xray = xvp
   234 000000ED 8945A8                  	mov xray,eax
   235 000000F0 8B45B0                  	mov eax,yvp			; yray = yvp
   236 000000F3 8945A4                  	mov yray,eax
   237 000000F6 8B45D8                  	mov eax,zvp			; zray = zvp
   238 000000F9 8945A0                  	mov zray,eax
   239                                  
   240                                  	; Store zray as integer izray
   241 000000FC D945A0                  	fld dword zray
   242 000000FF DB5D9C                  	fistp dword izray
   243                                  		
   244                                  	; Calc zdy,zdx
   245 00000102 D945B8                  	fld dword zrayang	; zrayang
   246 00000105 DB45AC                  	fild dword C		; C,zrayang
   247 00000108 DEC1                    	faddp st1			; zrayang+C
   248 0000010A DB45C0                  	fild dword i360
   249 0000010D DEF9                    	fdivp st1			; ((zrayang+C)/360)
   250 0000010F D9FB                    	fsincos				; cos | sin
   251 00000111 D95D94                  	fstp dword zdy		; = Cos((zrayang+C)/360)
   252 00000114 D95D98                  	fstp dword zdx		; = Sin((zrayang+C)/360)
   253                                  	
   254                                  	; Calc zdz
   255 00000117 DB45C4                  	fild dword i2		; 2
   256 0000011A D945D4                  	fld dword zdslope	; zdslope,2
   257 0000011D D945D0                  	fld dword zslopemult; zslopemult,zdslope,2 
   258 00000120 DEC9                    	fmulp st1			; zslopemult*zdslope,2
   259 00000122 DEC9                    	fmulp st1			; zslopemult*zdslope*2
   260 00000124 D95D90                  	fstp dword zdz		; zdz = zslopemult*zdslope*2
   261                                  	
   262                                  	; Init zvoxscale
   263 00000127 D9EE                    	fldz				; 0
   264 00000129 D95D8C                  	fstp dword zvoxscale; zvoxscale = 0
   265                                  	
   266                                  	; Init row
   267 0000012C B801000000              	mov eax,1			; row = 1
   268 00000131 894588                  	mov row,eax
   269                                  
   270                                  	; LOOK AHEAD STEPS
   271 00000134 B900000000              	mov ecx,0			; For cstep = 0 To LAH
   272                                  
   273                                  NEXT_STEP:
   274                                  
   275                                  	; Find ixr & iyr
   276 00000139 D945A8                  	fld dword xray		; xray
   277 0000013C DB5D84                  	fistp dword ixr		; ixr = Int(xray)
   278 0000013F 8B4584                  	mov eax,ixr			
   279 00000142 8B55F4                  	mov edx,FSWH
   280 00000145 BB11000000              	mov ebx,17
   281 0000014A 29DA                    	sub edx,ebx			; edx = FSWH-17
   282 0000014C 21D0                    	and eax,edx
   283 0000014E 0509000000              	add eax,9
   284 00000153 894584                  	mov ixr,eax			; = (xray AND (FSWH - 17) + 9
   285                                  	
   286 00000156 D945A4                  	fld dword yray		; yray
   287 00000159 DB5D80                  	fistp dword iyr		; iyr = Int(yray)
   288 0000015C 8B4580                  	mov eax,iyr
   289 0000015F 21D0                    	and eax,edx
   290 00000161 0509000000              	add eax,9
   291 00000166 894580                  	mov iyr,eax			; = (yray AND (FSWH - 17) + 9
   292                                  
   293                                  	; Get color/height = FloorSurf(ixr,iyr) ->cul
   294                                  	; and multiply by zhtmult
   295 00000169 8B75F0                  	mov esi,ptFS		; -> FloorSurf(1,1)
   296 0000016C 8B4580                  	mov eax,iyr
   297 0000016F 48                      	dec eax
   298 00000170 8B55F4                  	mov edx,FSWH
   299 00000173 F7E2                    	mul edx		
   300 00000175 01C6                    	add esi,eax 		; ptFS + (iyr-1) * FSWH
   301 00000177 8B4584                  	mov eax,ixr
   302 0000017A 48                      	dec eax
   303 0000017B 01C6                    	add esi,eax			; -> FloorSurf(ixr,iyr)
   304                                  	
   305                                  	; Get cul
   306 0000017D 31C0                    	xor eax,eax
   307 0000017F 8A06                    	mov al,[esi]		; cul-ht
   308 00000181 89857CFFFFFF            	mov cul,eax			; cul in AL
   309 00000187 898578FFFFFF            	mov iht,eax			; ht
   310                                  	
   311 0000018D 3B45C8                  	cmp eax,hlim
   312 00000190 7E09                    	jle NoHtChange
   313                                  	
   314 00000192 8B45C8                  	mov eax,hlim
   315 00000195 898578FFFFFF            	mov iht,eax			; plateau height
   316                                  	
   317                                  NoHtChange:
   318                                  	; Multiply by zhtmult
   319 0000019B DB8578FFFFFF            	fild dword iht		; iht
   320 000001A1 D945CC                  	fld dword zhtmult	; zhtmult,iht
   321 000001A4 DEC9                    	fmulp ST1
   322 000001A6 DB9D78FFFFFF            	fistp dword iht		; iht = iht * zhtmult
   323                                  	
   324                                  	; Compare iht & izray
   325 000001AC 8B8578FFFFFF            	mov eax,iht
   326 000001B2 3B459C                  	cmp eax,izray
   327 000001B5 0F8EAC000000            	jle near UPDATE_RAY ; iht <= izray
   328                                  
   329                                  	; zht > zray  -  above drawn area
   330                                  
   331                                  DRAW_PIX:
   332                                  
   333 000001BB 8B7DF8                  	mov edi,ptPS		; ->ProjSurf(1,1)	
   334 000001BE 8B4588                  	mov eax,row
   335 000001C1 48                      	dec eax
   336 000001C2 8B55FC                  	mov edx,PSWH
   337 000001C5 F7E2                    	mul edx
   338 000001C7 01C7                    	add edi,eax			; ptPS + (row-1) * PSWH
   339 000001C9 8B45AC                  	mov eax,C
   340                                  	;inc eax
   341 000001CC 01C7                    	add edi,eax			; ->ProjSurf(C+1,row)
   342 000001CE 8B857CFFFFFF            	mov eax,cul
   343 000001D4 8807                    	mov [edi],AL		; ProjSurf(C+1,row) = cul
   344                                  	
   345                                  	; Update zray
   346 000001D6 D94590                  	fld dword zdz
   347 000001D9 D945D4                  	fld dword zdslope
   348 000001DC DEC1                    	faddp st1
   349 000001DE D95D90                  	fstp dword zdz		; zdz = zdz + zdslope
   350                                  	
   351 000001E1 D945A0                  	fld dword zray
   352 000001E4 D9458C                  	fld dword zvoxscale
   353 000001E7 DEC1                    	faddp st1
   354 000001E9 D95DA0                  	fstp dword zray		; zray = zray + zvoxscale
   355                                  	
   356 000001EC 8B4588                  	mov eax,row
   357 000001EF 40                      	inc eax
   358 000001F0 894588                  	mov row,eax			; row = row + 1
   359                                  	
   360 000001F3 3B45FC                  	cmp eax,PSWH		; row-PSWH
   361 000001F6 0F87A7000000            	ja near UPDATE_COLUMN	;row > PSWH
   362                                  	
   363                                  	; Test collision
   364                                  	;---------------
   365 000001FC 8B8574FFFFFF            	mov eax,Collide
   366 00000202 3D01000000              	cmp eax,1
   367 00000207 7449                    	je End_Collision    ;Collision already found
   368                                  	
   369 00000209 8B45E8                  	mov eax,ex			; eax=ex
   370 0000020C 0509000000              	add eax,9			; match +9 for ixr
   371 00000211 8B5584                  	mov edx,ixr
   372 00000214 81EA02000000            	sub edx,2			; edx=ixr-2
   373 0000021A 39D0                    	cmp eax,edx			; ex-(ixr-2)
   374 0000021C 7C34                    	jl End_Collision	; ex < ixr-2
   375                                  
   376 0000021E 81C204000000            	add edx,4			; edx=ixr+2
   377 00000224 39D0                    	cmp eax,edx			; ex-(ixr+2)
   378 00000226 7F2A                    	jg End_Collision	; ex > ixr+2
   379                                  	
   380 00000228 8B45E4                  	mov eax,ey			; eax=ey
   381 0000022B 0509000000              	add eax,9			; match +9 for iyr
   382 00000230 8B5580                  	mov edx,iyr
   383 00000233 81EA02000000            	sub edx,2			; edx = iyr-2
   384 00000239 39D0                    	cmp eax,edx			; ey-(iyr-2)
   385 0000023B 7C15                    	jl End_Collision	; ey < iyr-2
   386                                  
   387 0000023D 81C204000000            	add edx,4			; edx=iyr+2
   388 00000243 39D0                    	cmp eax,edx			; ey-(iyr+2)
   389 00000245 7F0B                    	jg End_Collision	; ey > iyr+2
   390                                  
   391 00000247 B801000000              	mov eax,1
   392 0000024C 898574FFFFFF            	mov Collide,eax		; A Collision
   393                                  End_Collision:
   394                                  	;---------------
   395                                  	
   396 00000252 D945A0                  	fld dword zray	
   397 00000255 DB5D9C                  	fistp dword izray
   398 00000258 8B459C                  	mov eax,izray
   399 0000025B 3B8578FFFFFF            	cmp eax,iht			; izray-iht
   400 00000261 0F8E54FFFFFF            	jle near DRAW_PIX	; izray <= iht
   401                                  	
   402                                  	; izray > iht   column done
   403                                  
   404                                  UPDATE_RAY:
   405 00000267 D94598                  	fld dword zdx
   406 0000026A D945A8                  	fld dword xray
   407 0000026D DEC1                    	faddp st1
   408 0000026F D95DA8                  	fstp dword xray		;xray=xray+zdx
   409                                  	
   410 00000272 D94594                  	fld dword zdy
   411 00000275 D945A4                  	fld dword yray
   412 00000278 DEC1                    	faddp st1
   413 0000027A D95DA4                  	fstp dword yray		;yray=yray+zdy
   414                                  	
   415 0000027D D94590                  	fld dword zdz
   416 00000280 D945A0                  	fld dword zray
   417 00000283 DEC1                    	faddp st1
   418 00000285 D95DA0                  	fstp dword zray		;zray=zray+zdz
   419                                  
   420                                  	; Store zray as integer izray
   421 00000288 D945A0                  	fld dword zray
   422 0000028B DB5D9C                  	fistp dword izray
   423                                  
   424 0000028E D945D4                  	fld dword zdslope
   425 00000291 D9458C                  	fld dword zvoxscale
   426 00000294 DEC1                    	faddp st1
   427 00000296 D95D8C                  	fstp dword zvoxscale	;zvoxscale=zvoxscale+zdslope
   428                                  	
   429 00000299 41                      	inc ecx
   430 0000029A 3B4DEC                  	cmp ecx,LAH			; ecx-LAH
   431 0000029D 0F8E96FEFFFF            	jle near NEXT_STEP	; ecx <= LAH	Next cstep
   432                                  
   433                                  UPDATE_COLUMN:
   434 000002A3 59                      	POP ecx
   435 000002A4 41                      	inc ecx
   436 000002A5 8B45FC                  	mov eax,PSWH
   437 000002A8 48                      	dec eax				; PSWH-1
   438 000002A9 39C8                    	cmp eax,ecx			; (PSWH-1)-C
   439 000002AB 0F8F35FEFFFF            	jg near NEXT_COLUMN	; (PSWH-1) > C  ie C < (PSWH-1)  Next C
   440                                  	
   441                                  	; C = PSWH-1  all columns done
   442                                  
   443                                  SaveCollision:
   444                                  	; Return Collision 0/1 no/yes collision
   445 000002B1 8B5D08                  	mov ebx,[ebp+8]		; ->BITDATA
   446 000002B4 8B8574FFFFFF            	mov eax,Collide
   447 000002BA 894320                  	mov [ebx+32],eax	; bmp.Collision = Collide
   448 000002BD C3                      RET						; END FLOOR_CASTER
   449                                  
   450                                  ;########################################################################
   451                                  ;###### PLASMA ##########################################################
   452                                  ;###### 2048+16 x 2048+16 FloorSurf  Plasma 9->FSWH-8 2048x2048 square ##
   453                                  ;########################################################################
   454                                  
   455                                  ;	TEMPORARY VARIABLES FOR PLASMA
   456                                  
   457                                  %define FSWHm8		[ebp-56]       ; FSWH-8 For loops
   458                                  %define FSWHm16		[ebp-60]		; FSWH-16 for Stepsize
   459                                  %define NoSteps		[ebp-64]       ; Init 2 then x 2
   460                                  %define StepSize	[ebp-68]       ; StepSize (FSWH-16)/2
   461                                  %define IY			[ebp-72]
   462                                  %define IX			[ebp-76]
   463                                  %define ix1			[ebp-80]
   464                                  %define iy1			[ebp-84]
   465                                  %define ix2			[ebp-88]
   466                                  %define iy2			[ebp-92]
   467                                  %define ixa 		[ebp-96]
   468                                  %define iya 		[ebp-100]
   469                                  %define cul1 		[ebp-104]
   470                                  %define cul2 		[ebp-108]
   471                                  %define cul3 		[ebp-112]
   472                                  %define cul4 		[ebp-116]
   473                                  %define ixm			[ebp-120]
   474                                  %define iym			[ebp-124]
   475                                  
   476                                  %define culr		[ebp-128]    
   477                                  
   478                                  
   479                                  PLASMA:
   480                                  
   481 000002BE 8B45F4                  	mov eax,[ebp-12]
   482 000002C1 898570FFFFFF            	mov irand,eax
   483                                  	
   484 000002C7 8B45F4                  	mov eax,FSWH
   485 000002CA 2D08000000              	sub eax,8
   486 000002CF 8945C8                  	mov FSWHm8,eax		; FSWH-8
   487                                  	
   488 000002D2 2D08000000              	sub eax,8			; FSWH-16
   489 000002D7 8945C4                  	mov FSWHm16,eax
   490                                  
   491                                  	; Seed corners
   492                                  	
   493 000002DA E81F020000              	CALL RandRough		; eax random
   494 000002DF 89C3                    	mov ebx,eax			; BL random color
   495 000002E1 B809000000              	mov eax,9
   496 000002E6 8945A0                  	mov ixa,eax
   497 000002E9 89459C                  	mov iya,eax
   498 000002EC E850020000              	CALL PutCul			; FloorSurf(9,9) = cul
   499                                  	
   500 000002F1 E808020000              	CALL RandRough		; eax random
   501 000002F6 89C3                    	mov ebx,eax			; BL random color
   502 000002F8 8B45C8                  	mov eax,FSWHm8
   503 000002FB 8945A0                  	mov ixa,eax
   504 000002FE B809000000              	mov eax,9
   505 00000303 89459C                  	mov iya,eax
   506 00000306 E836020000              	CALL PutCul			; FloorSurf(FSWHm8,9) = cul
   507                                  	
   508 0000030B E8EE010000              	CALL RandRough		; eax random
   509 00000310 89C3                    	mov ebx,eax			; BL random color
   510 00000312 B809000000              	mov eax,9
   511 00000317 8945A0                  	mov ixa,eax
   512 0000031A 8B45C8                  	mov eax,FSWHm8
   513 0000031D 89459C                  	mov iya,eax
   514 00000320 E81C020000              	CALL PutCul			; FloorSurf(9,FSWHm8) = cul
   515                                  	
   516 00000325 E8D4010000              	CALL RandRough		; eax random
   517 0000032A 89C3                    	mov ebx,eax			; BL random color
   518 0000032C 8B45C8                  	mov eax,FSWHm8
   519 0000032F 8945A0                  	mov ixa,eax
   520 00000332 89459C                  	mov iya,eax
   521 00000335 E807020000              	CALL PutCul			; FloorSurf(FSWHm8,FSWHm8) = cul
   522                                  	
   523                                  	
   524 0000033A B802000000              	mov eax,2
   525 0000033F 8945C0                  	mov NoSteps,eax		; Start NoSteps = 2
   526                                  	
   527                                  NewStepSize:
   528                                  
   529 00000342 8B45C4                  	mov eax,FSWHm16		; Calc StepSize
   530 00000345 8B5DC0                  	mov ebx,NoSteps
   531 00000348 81FB00000000            	cmp ebx,0
   532 0000034E 7701                    	ja ook
   533 00000350 C3                      	RET
   534                                  ook:
   535 00000351 31D2                    	xor edx,edx			; CRITICAL because it's  edx:eax/ebx
   536 00000353 F7F3                    	div ebx
   537 00000355 8945BC                  	mov StepSize,eax	; StepSize = (FSWH-16)/NoSteps
   538                                  
   539 00000358 3D02000000              	cmp eax,2			; Check StepSize
   540 0000035D 7D01                    	jge Continue
   541 0000035F C3                      	RET
   542                                  	
   543                                  Continue:
   544                                  
   545 00000360 B909000000              	mov ecx,9			; For IY = 9 To FSWH-8
   546                                  ForIY:
   547 00000365 51                      	PUSH ecx
   548 00000366 894DB8                  	mov IY,ecx
   549                                  	
   550 00000369 B909000000              	mov ecx,9			; For IX = 9 To FSWH-8
   551                                  ForIX:
   552 0000036E 51                      	PUSH ecx
   553 0000036F 894DB4                  	mov IX,ecx
   554                                  
   555                                  	;----------------------------------------
   556 00000372 8B45B4                  	mov eax,IX			; Set ix1,iy1,ix2,iy2
   557 00000375 3B45C8                  	cmp eax,FSWHm8
   558 00000378 7E03                    	jle IXok
   559 0000037A 8B45C8                  	mov eax,FSWHm8
   560                                  IXok:
   561 0000037D 8945B0                  	mov ix1,eax
   562                                  	
   563 00000380 8B45B8                  	mov eax,IY
   564 00000383 3B45C8                  	cmp eax,FSWHm8
   565 00000386 7E03                    	jle IYok
   566 00000388 8B45C8                  	mov eax,FSWHm8
   567                                  IYok:
   568 0000038B 8945AC                  	mov iy1,eax
   569                                  	
   570 0000038E 8B45B4                  	mov eax,IX
   571 00000391 0345BC                  	add eax,StepSize
   572 00000394 3B45C8                  	cmp eax,FSWHm8
   573 00000397 7E03                    	jle IXStepok
   574 00000399 8B45C8                  	mov eax,FSWHm8
   575                                  IXStepok:
   576 0000039C 8945A8                  	mov ix2,eax
   577                                  	
   578 0000039F 8B45B8                  	mov eax,IY
   579 000003A2 0345BC                  	add eax,StepSize
   580 000003A5 3B45C8                  	cmp eax,FSWHm8
   581 000003A8 7E03                    	jle IYStepok
   582 000003AA 8B45C8                  	mov eax,FSWHm8
   583                                  IYStepok:
   584 000003AD 8945A4                  	mov iy2,eax
   585                                  	
   586                                  	;----------------------------------------
   587 000003B0 E849010000              	CALL RandRough		;edx = 16 or 8 * (Rnd - 0.5)
   588 000003B5 895580                  	mov culr,edx
   589                                  	;----------------------------------------
   590                                  	
   591                                  	; Get 4 colors
   592 000003B8 8B45B0                  	mov eax,ix1			; cul1 = FloorSurf(ix1,iy1)
   593 000003BB 8945A0                  	mov ixa,eax
   594 000003BE 8B45AC                  	mov eax,iy1
   595 000003C1 89459C                  	mov iya,eax
   596 000003C4 E860010000              	CALL GetCul
   597 000003C9 894D98                  	mov cul1,ecx
   598                                  	
   599 000003CC 8B45B0                  	mov eax,ix1			; cul2 = FloorSurf(ix1,iy2)
   600 000003CF 8945A0                  	mov ixa,eax
   601 000003D2 8B45A4                  	mov eax,iy2
   602 000003D5 89459C                  	mov iya,eax
   603 000003D8 E84C010000              	CALL GetCul
   604 000003DD 894D94                  	mov cul2,ecx
   605                                  	
   606 000003E0 8B45A8                  	mov eax,ix2			; cul3 = FloorSurf(ix2,iy1)
   607 000003E3 8945A0                  	mov ixa,eax
   608 000003E6 8B45AC                  	mov eax,iy1
   609 000003E9 89459C                  	mov iya,eax
   610 000003EC E838010000              	CALL GetCul
   611 000003F1 894D90                  	mov cul3,ecx
   612                                  	
   613 000003F4 8B45A8                  	mov eax,ix2			; cul4 = FloorSurf(ix2,iy2)
   614 000003F7 8945A0                  	mov ixa,eax
   615 000003FA 8B45A4                  	mov eax,iy2
   616 000003FD 89459C                  	mov iya,eax
   617 00000400 E824010000              	CALL GetCul
   618 00000405 894D8C                  	mov cul4,ecx
   619                                  	;----------------------------------------
   620                                  	
   621                                  	;Use  PutCul 5 times Put cul number in BL into FloorSurf(ixa,iya)
   622                                  	
   623 00000408 8B4598                  	mov eax,cul1		; 1 LEFT
   624 0000040B 034594                  	add eax,cul2
   625 0000040E D1E8                    	shr eax,1			; (cul1+cul2)/2
   626 00000410 034580                  	add eax,culr
   627 00000413 25FF000000              	and eax,255
   628 00000418 89C3                    	mov ebx,eax			; cul in BL
   629                                  	
   630 0000041A 8B45B0                  	mov eax,ix1			; FloorSurf(ix1,iym)= cul
   631 0000041D 8945A0                  	mov ixa,eax
   632                                  	
   633 00000420 8B45AC                  	mov eax,iy1
   634 00000423 0345A4                  	add eax,iy2
   635 00000426 D1E8                    	shr eax,1
   636 00000428 89459C                  	mov iya,eax
   637 0000042B 894584                  	mov iym,eax			; iym=(iy1+iy2)/2
   638 0000042E E80E010000              	CALL PutCul
   639                                  	;-------------------------------------
   640                                  
   641 00000433 8B4590                  	mov eax,cul3		; 2 RIGHT
   642 00000436 03458C                  	add eax,cul4
   643 00000439 D1E8                    	shr eax,1			; (cul3+cul4)/2
   644 0000043B 034580                  	add eax,culr
   645 0000043E 25FF000000              	and eax,255
   646 00000443 89C3                    	mov ebx,eax			; cul in BL
   647                                  	
   648 00000445 8B45A8                  	mov eax,ix2			; FloorSurf(ix2,iym)= cul
   649 00000448 8945A0                  	mov ixa,eax
   650                                  	
   651 0000044B 8B4584                  	mov eax,iym			; iym
   652 0000044E 89459C                  	mov iya,eax
   653 00000451 E8EB000000              	CALL PutCul
   654                                  	;-------------------------------------
   655                                  	
   656 00000456 8B4598                  	mov eax,cul1		; 3 BOTTOM
   657 00000459 034590                  	add eax,cul3
   658 0000045C D1E8                    	shr eax,1			; (cul1+cul3)/2
   659 0000045E 034580                  	add eax,culr
   660 00000461 25FF000000              	and eax,255
   661 00000466 89C3                    	mov ebx,eax			; cul in BL
   662                                  	
   663 00000468 8B45B0                  	mov eax,ix1
   664 0000046B 0345A8                  	add eax,ix2
   665 0000046E D1E8                    	shr eax,1
   666 00000470 8945A0                  	mov ixa,eax
   667 00000473 894588                  	mov ixm,eax			; ixm=(ix1+ix2)/2
   668                                  	
   669 00000476 8B45AC                  	mov eax,iy1			; FloorSurf(ixm,iy1)= cul
   670 00000479 89459C                  	mov iya,eax
   671 0000047C E8C0000000              	CALL PutCul
   672                                  	;-------------------------------------
   673                                  
   674 00000481 8B4594                  	mov eax,cul2		; 4 TOP
   675 00000484 03458C                  	add eax,cul4
   676 00000487 D1E8                    	shr eax,1			; (cul2+cul4)/2
   677 00000489 034580                  	add eax,culr
   678 0000048C 25FF000000              	and eax,255
   679 00000491 89C3                    	mov ebx,eax			; cul in BL
   680                                  	
   681 00000493 8B4588                  	mov eax,ixm			; ixm
   682 00000496 8945A0                  	mov ixa,eax
   683                                  	
   684 00000499 8B45A4                  	mov eax,iy2			; FloorSurf(ixm,iy2)= cul
   685 0000049C 89459C                  	mov iya,eax
   686 0000049F E89D000000              	CALL PutCul
   687                                  	;-------------------------------------
   688                                  
   689 000004A4 8B4598                  	mov eax,cul1		; 5 MIDDLE
   690 000004A7 034594                  	add eax,cul2
   691 000004AA 034590                  	add eax,cul3
   692 000004AD 03458C                  	add eax,cul4
   693 000004B0 C1E802                  	shr eax,2			; (cul1+cul2+cul3+cul4)/4
   694 000004B3 034580                  	add eax,culr
   695 000004B6 25FF000000              	and eax,255
   696 000004BB 89C3                    	mov ebx,eax			; cul in BL
   697                                  	
   698 000004BD 8B4588                  	mov eax,ixm			; ixm
   699 000004C0 8945A0                  	mov ixa,eax
   700                                  	
   701 000004C3 8B4584                  	mov eax,iym			; iym
   702 000004C6 89459C                  	mov iya,eax
   703 000004C9 E873000000              	CALL PutCul			; FloorSurf(ixm,iym)= cul
   704                                  	;-------------------------------------
   705                                  	
   706 000004CE 59                      	POP ecx
   707 000004CF 8B45BC                  	mov eax,StepSize
   708 000004D2 01C1                    	add ecx,eax
   709 000004D4 8B45C8                  	mov eax,FSWHm8
   710 000004D7 39C1                    	cmp ecx,eax
   711 000004D9 0F8E8FFEFFFF            	jle near ForIX
   712                                  
   713 000004DF 59                      	POP ecx
   714 000004E0 8B45BC                  	mov eax,StepSize
   715 000004E3 01C1                    	add ecx,eax
   716 000004E5 8B45C8                  	mov eax,FSWHm8
   717 000004E8 39C1                    	cmp ecx,eax
   718 000004EA 0F8E75FEFFFF            	jle near ForIY
   719                                  
   720 000004F0 8B45C0                  	mov eax,NoSteps
   721 000004F3 D1E0                    	shl eax,1	
   722 000004F5 8945C0                  	mov NoSteps,eax		; NoSteps=NoSteps x 2
   723 000004F8 E945FEFFFF              	jmp NewStepSize
   724                                  
   725 000004FD C3                      RET
   726                                  
   727                                  ;########################################################################
   728                                  ;######  RandRough                          #############################
   729                                  ;######  Uses irand, eax, edx               ############################
   730                                  ;########################################################################
   731                                  RandRough:
   732                                  
   733                                  ;	Produces 	random number in eax &
   734                                  ;				16 or 8 * (Rnd - 0.5) in edx
   735                                  
   736 000004FE B80B180100              	mov eax,01180Bh		;71699
   737 00000503 F7AD70FFFFFF            	imul dword irand
   738 00000509 0509B20A00              	add eax,0AB209h		;700937
   739                                  	; Make odd
   740 0000050E D1D8                    	rcr eax,1
   741 00000510 7201                    	jc ok
   742 00000512 F9                      	stc
   743                                  ok:
   744 00000513 D1D0                    	rcl eax,1
   745 00000515 898570FFFFFF            	mov irand,eax
   746                                  	
   747 0000051B 31D2                    	xor edx,edx
   748 0000051D 88C2                    	mov dl,al			;0-255
   749                                  	
   750 0000051F 6681EA8000              	sub dx,128			;-128 -> +128
   751 00000524 66C1FA03                	sar dx,3			;3 edx( div 16) = +/-8
   752                                  
   753 00000528 C3                      RET
   754                                  
   755                                  ;########################################################################
   756                                  ;######  GetCul  Get cul number to ecx                      #############
   757                                  ;######  ecx = [FloorSurf(ixa,iya)                          #############
   758                                  ;######  Uses eax, ebx, ecx, edi  nb edx not used           #############
   759                                  ;########################################################################
   760                                  GetCul:				; Input ixa,iya  Output: Cul in ecx
   761 00000529 8B45F4                  	mov eax,FSWH	; Get offset to ixa,iya
   762 0000052C 8B5D9C                  	mov ebx,iya
   763 0000052F 4B                      	dec ebx
   764 00000530 F7E3                    	mul ebx
   765 00000532 8B5DA0                  	mov ebx,ixa
   766 00000535 4B                      	dec ebx
   767 00000536 01D8                    	add eax,ebx
   768 00000538 8B7DF0                  	mov edi,ptFS
   769 0000053B 01C7                    	add edi,eax
   770                                  	
   771 0000053D 0FB60F                  	movzx ecx,byte[edi]
   772 00000540 C3                      	RET
   773                                  	
   774                                  ;########################################################################
   775                                  ;######  PutCul  Put cul number in BL into FloorSurf(ixa,iya) ###########
   776                                  ;######  Uses eax, edx, edi, ebx input  nb ecx not used     #############
   777                                  ;########################################################################
   778                                  PutCul:				; Input ixa,iya, cul in BL
   779 00000541 8B45F4                  	mov eax,FSWH	; Get offset to ixa,iya
   780 00000544 8B559C                  	mov edx,iya
   781 00000547 4A                      	dec edx
   782 00000548 F7E2                    	mul edx
   783 0000054A 8B55A0                  	mov edx,ixa
   784 0000054D 4A                      	dec edx
   785 0000054E 01D0                    	add eax,edx
   786 00000550 8B7DF0                  	mov edi,ptFS
   787 00000553 01C7                    	add edi,eax
   788                                  	
   789 00000555 881F                    	mov [edi],BL
   790 00000557 C3                      	RET
   791                                  
   792                                  ;########################################################################
   793                                  ;######  BYTESMOOTHING  #################################################
   794                                  ;########################################################################
   795                                  
   796                                  BYTESMOOTHING:
   797                                  
   798 00000558 B904000000              MOV ecx,4
   799                                  
   800                                  NSmoothers:
   801                                  
   802 0000055D 51                      PUSH ecx
   803                                  
   804                                  	
   805 0000055E 8B7DF0                  	mov edi,ptFS
   806 00000561 B809000000              	mov eax,9
   807 00000566 48                      	dec eax
   808 00000567 8B5DF4                  	mov ebx,FSWH
   809 0000056A F7E3                    	mul ebx
   810 0000056C 01C7                    	add edi,eax
   811 0000056E B809000000              	mov eax,9
   812 00000573 48                      	dec eax
   813 00000574 01C7                    	add edi,eax
   814                                  	
   815 00000576 B900804000              	mov ecx,4227072		; 2048 x 2064
   816 0000057B 31C0                    	xor eax,eax
   817                                  
   818                                  ByteSmooth:
   819 0000057D 31D2                    	xor edx,edx
   820 0000057F 8A47FF                  	mov AL,[edi-1]
   821 00000582 01C2                    	add edx,eax
   822 00000584 8A4701                  	mov AL,[edi+1]
   823 00000587 01C2                    	add edx,eax
   824 00000589 8A8700F8FFFF            	mov AL,[edi-2048]
   825 0000058F 01C2                    	add edx,eax
   826 00000591 8A8700080000            	mov AL,[edi+2048]
   827 00000597 01C2                    	add edx,eax
   828 00000599 C1EA02                  	shr edx,2
   829 0000059C 81FA03000000            	cmp edx,3
   830 000005A2 7702                    	ja culok
   831 000005A4 B280                    	mov DL,128
   832                                  culok:
   833 000005A6 8817                    	mov [edi],DL
   834 000005A8 47                      	inc edi
   835 000005A9 49                      	dec ecx
   836 000005AA 75D1                    	jnz ByteSmooth
   837                                  
   838 000005AC 59                      POP ecx
   839 000005AD 49                      dec ecx
   840 000005AE 0F85A9FFFFFF            jnz near NSmoothers
   841                                  
   842                                  
   843 000005B4 C3                      RET
   844                                  ;###########################################
   845                                  ;;;;;;;;;;;;;;;;;;;;
   846                                  ;pop ecx
   847                                  ;mov eax,ebx 
   848                                  ;RET
   849                                  ;;;;;;;;;;;;;;;;;;;;
   850                                  
   851                                  	
